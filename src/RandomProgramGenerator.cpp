// -*- mode: C++ -*-
//
// Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The University of Utah
// All rights reserved.
//
// 本文件是 csmith 随机 C 程序生成器的主控文件，包含主函数和参数解析、帮助信息等核心流程。
//
// 主要功能：
//   - 解析命令行参数，设置全局选项
//   - 初始化随机种子
//   - 创建并启动程序生成器
//   - 输出帮助、版本等信息
//
// 适合入门理解整个工具的主流程。
//
// This file was derived from a random program generator written by Bryan
// Turner.  The attributions in that file was:
//
// Random Program Generator
// Bryan Turner (bryan.turner@pobox.com)
// July, 2005
//
// Contributions and bug fixes by:
// Jan-2007 : Mat Hostetter - Explicit "return 0" for main()
//

/*
随机 C/C++ 程序生成器主流程说明：
------------------------------
1) 创建一组将在程序中使用的随机类型
2) 创建 main 函数
3) 生成一个包含最大控制和表达式嵌套深度的随机语句块
4) 如果在 #3 中定义了新函数，则循环回去填充其函数体
5) 达到最大函数数量后，停止生成新函数，完成剩余函数体
6) 输出最终生成的程序

主要目标：
- 定位编译器前端的基本错误（如崩溃等）
- 揪出优化过程中的正确性错误
- 支持优化路径改进工具的设计

TODO:
- Protect back links with a global DEPTH, don't call if DEPTH is too high (avoid infinite recursion)
- Main function generates hash of global state as output of program - use to locate optimization errors.
	- Compile in Debug mode vs. Optimized mode, compare hash value at program termination.
- Improve hash function; use stronger hashing (ARCFOUR) and perform hashing at random points in the graph.
	- Output only after successful program termination.

FUTURE:
- Complex types
- Type-correct expressions
- Some substitutions allowed
	- int, char, short, long, float, double - all interchangeable to some degree (use appropriate casts)
	- array <--> pointer
	- pointer promotion (ie: passing the pointer to a local var, or droping the pointer to pass by value)
- Memory Allocation & Manipulation?
	- Choose random functions to perform allocations
	- Choose random children/ancestors to perform deallocations
	- Work from leaves to root
	- If node uses pointer or array, it is potential heap store allocated.
*/

#if HAVE_CONFIG_H
#  include <config.h>
#endif

#ifdef WIN32
#pragma warning(disable : 4786)   /* 关闭烦人的警告信息 */
#endif

#include <ostream>
#include <fstream>
#include <cstring>
#include <cstdio>

#include "Common.h"              // 公共类型和声明
#include "CGOptions.h"           // 全局配置选项
#include "AbsProgramGenerator.h" // 抽象程序生成器

#include "git_version.h"         // 版本信息
#include "platform.h"            // 平台相关
#include "random.h"              // 随机数相关

using namespace std;

//#define PACKAGE_STRING "csmith 1.1.1"
///////////////////////////////////////////////////////////////////////////////

// ----------------------------------------------------------------------------
// 全局变量：用于存储当前使用的随机种子，保证生成程序的可复现性
static unsigned long g_Seed = 0;

// ----------------------------------------------------------------------------
// 打印版本信息
static void
print_version(void)
{
	cout << PACKAGE_STRING << endl;
	cout << "Git version: " << git_version << endl;
	// TODO: 可扩展打印版权、联系方式等
}

// ----------------------------------------------------------------------------
// 解析字符串参数，赋值给 s，返回是否有效
bool parse_string_arg(const char *arg, string &s)
{
	s.assign(arg);
	return ((!s.empty()) &&
		(s.compare(0, 2, "--")));
}

// 解析整数参数，赋值给 ret，返回是否有效
static bool
parse_int_arg(char *arg, unsigned long *ret)
{
	int res;
	res = sscanf (arg, "%lu", ret);

	if (res == 0) {
		cout << "expected integer at arg position " << endl;
		return false;
	}
	return true;
}

// 打印常用命令行帮助信息
static void print_help()
{
	cout << "Command line options: " << endl << endl;
	// most common options
	cout << "  --help or -h: print this information." << endl << endl;
	cout << "  -hh: describe extra options probably useful only for Csmith developers." << endl << endl;
	cout << "  --version or -v: print the version of Csmith." << endl << endl;
	cout << "  --seed <seed> or -s <seed>: use <seed> instead of a random seed generated by Csmith." << endl << endl;
	cout << "  --output <filename> or -o <filename>: specify the output file name." << endl << endl;

	// enabling/disabling options
	cout << "  --argc | --no-argc: generate main function with/without argv and argc being passed (enabled by default)." << endl << endl;
	cout << "  --arrays | --no-arrays: enable | disable arrays (enabled by default)." << endl << endl;
	cout << "  --bitfields | --no-bitfields: enable | disable full-bitfields structs (enabled by default)." << endl << endl;
	cout << "  --checksum | --no-checksum: enable | disable checksum calculation (enabled by default)." << endl << endl;
	cout << "  --comma-operators | --no-comma-operators: enable | disable comma operators (enabled by default)." << endl << endl;
	cout << "  --compound-assignment | --no-compound-assignment: enable | disable compound assignments (enabled by default)." << endl << endl;
	cout << "  --concise: generated programs with minimal comments (disabled by default)." << endl << endl;
	cout << "  --consts | --no-consts: enable | disable const qualifier (enabled by default)." << endl << endl;
	cout << "  --divs | --no-divs: enable | disable divisions (enabled by default)." << endl << endl;
	cout << "  --embedded-assigns | --no-embedded-assigns: enable | disable embedded assignments as sub-expressions (enabled by default)." << endl << endl;
	cout << "  --pre-incr-operator | --no-pre-incr-operator: enable | disable pre ++ operator (enabled by default)." << endl << endl;
	cout << "  --pre-decr-operator | --no-pre-decr-operator: enable | disable pre -- operator (enabled by default)." << endl << endl;
	cout << "  --post-incr-operator | --no-post-incr-operator: enable | disable post ++ operator (enabled by default)." << endl << endl;
	cout << "  --post-decr-operator | --no-post-decr-operator: enable | disable post -- operator (enabled by default)." << endl << endl;
	cout << "  --unary-plus-operator | --no-unary-plus-operator: enable | disable + operator (enabled by default)." << endl << endl;
	cout << "  --jumps | --no-jumps: enable | disable jumps (enabled by default)." << endl << endl;
	cout << "  --longlong| --no-longlong: enable | disable long long (enabled by default)." << endl << endl;
	cout << "  --int8 | --no-int8: enable | disable int8_t (enabled by default)." << endl << endl;
	cout << "  --uint8 | --no-uint8: enable | disable uint8_t (enabled by default)." << endl << endl;
	cout << "  --float | --no-float: enable | disable float (disabled by default)." << endl << endl;
	cout << "  --main | --nomain: enable | disable to generate main function (enabled by default)." << endl <<  endl;
	cout << "  --math64 | --no-math64: enable | disable 64-bit math ops (enabled by default)." << endl << endl;
	cout << "  --inline-function | --no-inline-function: enable | disable inline attributes on generated functions." << endl << endl;
	cout << "  --inline-function-prob <num>: set the probability of each function being marked as inline (default is 50)." << endl << endl;
	cout << "  --array-oob-prob <num>: set the probability for limit of an array accessing loop to be out of bounds (default is 0)." << endl << endl;

	// numbered controls
	cout << "  --max-array-dim <num>: limit array dimensions to <num>. (default 3)" << endl << endl;
	cout << "  --max-array-len-per-dim <num>: limit array length per dimension to <num> (default 10)." << endl << endl;
	cout << "  --max-block-depth <num>: limit depth of nested blocks to <num> (default 5)." << endl << endl;
	cout << "  --max-block-size <size>: limit the number of non-return statements in a block to <size> (default 4)." << endl << endl;
	cout << "  --max-expr-complexity <num>: limit expression complexities to <num> (default 10)." << endl << endl;
	cout << "  --max-funcs <num>: limit the number of functions (besides main) to <num>  (default 10)." << endl << endl;
	cout << "  --max-pointer-depth <depth>: limit the indirect depth of pointers to <depth> (default 2)." << endl << endl;
	cout << "  --max-struct-fields <num>: limit the number of struct fields to <num> (default 10). " << endl << endl;
	cout << "  --max-union-fields <num>: limit the number of union fields to <num> (default 5). " << endl << endl;

	cout << "  --muls | --no-muls: enable | disable multiplications (enabled by default)." << endl << endl;
	cout << "  --safe-math | --no-safe-math: Emit safe math wrapper functions (enabled by default)." << endl << endl;
	cout << "  --packed-struct | --no-packed-struct: enable | disable packed structs by adding #pragma pack(1) before struct definition (enabled by default)." << endl << endl;
	cout << "  --paranoid | --no-paranoid: enable | disable pointer-related assertions (disabled by default)." << endl << endl;
	cout << "  --pointers | --no-pointers: enable | disable pointers (enabled by default)." << endl << endl;
	cout << "  --quiet: generate programs with less comments (disabled by default)." << endl << endl;
	cout << "  --structs | --no-structs: enable | disable to generate structs (enable by default)." << endl << endl;
	cout << "  --unions | --no-unions: enable | disable to generate unions (enable by default)." << endl << endl;
	cout << "  --volatiles | --no-volatiles: enable | disable volatiles (enabled by default)." << endl << endl;
	cout << "  --volatile-pointers | --no-volatile-pointers: enable | disable volatile pointers (enabled by default)." << endl << endl;
	cout << "  --const-pointers | --no-const-pointers: enable | disable const pointers (enabled by default)." << endl << endl;
	cout << "  --global-variables | --no-global-variables: enable | disable global variables (enabled by default)." << endl << endl;

	cout << "  --builtins | --no-builtins: enable | disable to generate builtin functions (disabled by default)." << endl << endl;
	cout << "  --enable-builtin-kinds k1,k2 | --disable-builtin-kinds k1,k2: enable | disable certain kinds of builtin functions." << endl << endl;
	cout << "  --builtin-function-prob <num>: set the probability of choosing a builtin function (default is 20)." << endl << endl;

        // language options
	cout << "  --lang-cpp : generate C++ code (C by default)." << endl << endl;
	cout << "  --cpp11 : generate C++11 code (C++03 by default). Works if lang-cpp is enabled." << endl << endl;

	//--------------------------GCC C Extensions--------------------------
	cout<< "------------------------------GCC C Extensions------------------------------" << endl << endl;
	cout << " --function-attributes | --no-func-attributes: enable | disable generate common function attributes (disabled by default)." << endl << endl;
	cout << " --type-attributes | --no-type-attributes: enable | disable generate common type attributes (disabled by default)." << endl << endl;
	cout << " --label-attributes | --no-label-attributes: enable | disable generate common label attributes (disabled by default)." << endl << endl;
	cout << " --variable-attributes | --no-variable-attributes: enable | disable generate common variable attributes (disabled by default)." << endl << endl;
	cout << " --compiler-attributes | --no-compiler-attributes: enable | disable generate function, type, label and variable attributes (disabled by default)." << endl << endl;
	cout << "  --int128 | --no-int128: enable | disable generate __int128 as datatype extension (disabled by default)." << endl << endl;
	cout << "  --uint128 | --no-uint128: enable | disable generate unsigned __int128 as datatype extension (disabled by default)." << endl << endl;
	cout << "  --binary-constant | --no-binary-constant: enable | disable generate binary constant (disabled by default)." << endl << endl;

}

// 打印高级命令行帮助信息，主要面向开发者
static void print_advanced_help()
{
	cout << "'Advanced' command line options that are probably only useful for Csmith's" << endl;
	cout << "original developers:" << endl << endl;
	// file split options
	cout << "  --max-split-files <num>: evenly split a generated program into <num> different files(default 0)." << endl << endl;
	cout << "  --split-files-dir <dir>: generate split-files into <dir> (default ./output)." << endl << endl;

	// dfs-exhaustive mode options
	cout << "  --dfs-exhaustive: enable depth first exhaustive random generation (disabled by default)." << endl << endl;
	cout << "  --expand-struct: enable the expansion of struct in the exhaustive mode. ";
	cout << "Only works in the exhaustive mode and cannot used with --no-structs." << endl << endl;

	cout << "  --compact-output: print generated programs in compact way. ";
	cout << "Only works in the exhaustive mode." << endl << endl;

	cout << "  --max-nested-struct-level <num>: limit maximum nested level of structs to <num>(default 0). ";
	cout << "Only works in the exhaustive mode." << endl << endl;

	cout << "  --struct-output <file>: dump structs declarations to <file>. ";
	cout << "Only works in the exhaustive mode." << endl << endl;

	cout << "  --prefix-name: prefix names of global functions and variables with increasing numbers. ";
	cout << "Only works in the exhaustive mode." << endl << endl;

	cout << "  --sequence-name-prefix: prefix names of global functions and variables with sequence numbers.";
	cout << "Only works in the exhaustive mode." << endl << endl;

	cout << "  --compatible-check: disallow trivial code such as i = i in random programs. ";
	cout << "Only works in the exhaustive mode." << endl << endl;

	// target platforms
	cout << "  --ccomp: generate compcert-compatible code" << endl << endl;

	// symblic excutions
	cout << "  --klee: enable klee extension" << endl << endl;
	cout << "  --crest: enable crest extension" << endl << endl;

	// coverage test options
	cout << "  --coverage-test: enable coverage-test extension" << endl << endl;
	cout << "  --coverage-test-size <num>: specify size (default 500) of the array generated to test coverage. ";
	cout << "Can only be used with --coverage-test." << endl << endl;

	cout << "  --func1_max_params <num>: specify the number of symbolic variables passed to func_1 (default 3). ";
	cout << "Only used when --crest | --klee | --coverage-test is enabled." << endl << endl;

	// struct/union related options
	cout << "  --fixed-struct-fields: fix the size of struct fields to max-struct-fields (default 10)." << endl << endl;
	cout << "  --return-structs | --no-return-structs: enable | disable return structs from a function (enabled by default)." << endl << endl;
	cout << "  --arg-structs | --no-arg-structs: enable | disable structs being used as args (enabled by default)." << endl << endl;
	cout << "  --return-unions | --no-return-unions: enable | disable return unions from a function (enabled by default)." << endl << endl;
	cout << "  --arg-unions | --no-arg-unions: enable | disable unions being used as args (enabled by default)." << endl << endl;
	cout << "  --take-union-field-addr | --take-no-union-field-addr: allow | disallow addresses of union fields to be taken (allowed by default)." << endl << endl;
	cout << "  --vol-struct-union-fields | --no-vol-struct-union-fields: enable | disable volatile struct/union fields (enabled by default)" << endl << endl;
	cout << "  --const-struct-union-fields | --no-const-struct-union-fields: enable | disable const struct/union fields (enabled by default)" << endl << endl;

	// delta related options
	cout << "  --delta-monitor [simple]: specify the type of delta monitor. Only [simple] type is supported now." << endl << endl;
	cout << "  --delta-input [file]: specify the file for delta input." << endl << endl;
	cout << "  --delta-output [file]: specify the file for delta output (default to <delta-input>)." << endl << endl;
	cout << "  --go-delta [simple]: run delta reduction on <delta-input>." << endl << endl;
	cout << "  --no-delta-reduction: output the same program as <delta-input>. ";
	cout << "Only works with --go-delta option." << endl << endl;

	// probability options
	cout << "  --dump-default-probabilities <file>: dump the default probability settings into <file>" << endl << endl;
	cout << "  --dump-random-probabilities <file>: dump the randomized probabilities into <file>" << endl << endl;
	cout << "  --probability-configuration <file>: use probability configuration <file>" << endl << endl;
	cout << "  --random-random: enable random probabilities." << endl << endl;

	// volatile checking options
	cout << "  --enable-access-once: enable testing access once macro." << endl << endl;
	cout << "  --strict-volatile-rule: make sure only one volatile access between any pair of sequence points. " << endl << endl;

	cout << "  --addr-taken-of-locals: enable addr-taken of local vars. [default]" << endl << endl;
	cout << "  --no-addr-taken-of-locals: disable addr-taken of local vars. " << endl << endl;

	cout << "  --fresh-array-ctrl-var-names: create fresh names [i1,i2,i3...] for array control vars rather than use unique names such as i, j, k." << endl << endl;

	// other options
	cout << "  --math-notmp: make csmith generate code for safe_math_macros_notmp." << endl << endl;

	cout << "  --strict-const-arrays: restrict array elements to constants." << endl << endl;

	cout << "  --partial-expand <assignment[,for[,block[,if-else[,invoke[,return]]]]]: ";
	cout <<"partial-expand controls which what kind of statements should be generated first. ";
	cout <<"For example, it could make Csmith start to generate if-else without go over assignment or for." << endl << endl;

	cout << "  --dangling-global-pointers | --no-dangling-global-pointers: enable | disable to reset all dangling global pointers to null at the end of main. (enabled by default)" << endl << endl;

	cout << "  --check-global: print the values of all integer global variables." << endl << endl;

	cout << "  --monitor-funcs <name1,name2...>: dump the checksums after each statement in the monitored functions." << endl << endl;

	cout << "  --step-hash-by-stmt: dump the checksum after each statement. It is applied to all functions unless --monitor-funcs is specified." << endl << endl;

	cout << "  --stop-by-stmt <num>: try to stop generating statements after the statement with id <num>." << endl << endl;

	cout << "  --const-as-condition: enable const to be conditions of if-statements. " << endl << endl;

	cout << "  --match-exact-qualifiers: match exact const/volatile qualifiers for LHS and RHS of assignments." << endl << endl;

	cout << "  --reduce <file>: reduce random program under the direction of the configuration file." << endl << endl;

	cout << "  --return-dead-pointer | --no-return-dead-pointer: allow | disallow functions from returning dangling pointers (disallowed by default)." << endl << endl;

	cout <<	"  --identify-wrappers: assign ids to used safe math wrappers." << endl << endl;

	cout << "  --safe-math-wrappers <id1,id2...>: specifiy ids of wrapper functions that are necessary to avoid undefined behaviors, use 0 to specify none." << endl << endl;

	cout << "  --mark-mutable-const: mark constants that can be mutated with parentheses (disabled by default)." << endl << endl;

	cout << "  --force-globals-static | --no-force-globals-static: force functions and global variables to use static storage (enabled by default)." << endl << endl;
	cout << "  --force-non-uniform-arrays | --no-force-non-uniform-arrays: force integer arrays to be initialized with multiple values (enabled by default)." << endl << endl;

	cout << "  --null-ptr-deref-prob <N>: allow null pointers to be dereferenced with probability N% (0 by default)." << endl << endl;

	cout << "  --dangling-ptr-deref-prob <N>: allow dangling pointers to be dereferenced with probability N% (0 by default)." << endl << endl;

	cout << "  --max-struct-nested-level: controls the max depth of nested structs (default is 3)." << endl << endl;
	cout << "  --no-hash-value-printf: do not emit printf on the index of an array" << endl << endl;
	cout << "  --no-signed-char-index: do not allow a var of type char to be used as array index" << endl << endl;
	cout << "  --strict-float: do not allow assignments between floats and integers" << endl << endl;

    // type size options
    cout << "  --int-size <size>: specify integer size of target (default taken from platform.info if it exists otherwise from host)"  << endl << endl;
    cout << "  --ptr-size <size>: specify pointer size of target (default taken from platform.info if it exists otherwise from host)"  << endl << endl;
}

// 检查参数个数是否合法，防止越界
void arg_check(int argc, int i)
{
	if (i >= argc) {
		cout << "expect arg at pos " << i << std::endl;
		exit(-1);
	}
}

// ----------------------------------------------------------------------------
// 主函数入口，负责解析命令行参数、设置全局选项、初始化生成器并启动程序生成流程
int
main(int argc, char **argv)
{
	// 生成随机种子（可用于复现）
	g_Seed = platform_gen_seed();

	// 设置默认的全局选项
	CGOptions::set_default_settings();

	// 解析命令行参数，支持多种配置和功能开关
	for (int i=1; i<argc; i++) {
		// 帮助信息
		if (strcmp (argv[i], "--help") == 0 ||
			strcmp (argv[i], "-h") == 0) {
			print_help();
			return 0;
		}
		// 高级帮助
		if (strcmp (argv[i], "-hh") == 0) {
			print_advanced_help();
			return 0;
		}
		// 版本信息
		if (strcmp (argv[i], "--version") == 0 ||
			strcmp (argv[i], "-v") == 0) {
			print_version();
			return 0;
		}
		// 设置随机种子
		if (strcmp (argv[i], "--seed") == 0 ||
			strcmp (argv[i], "-s") == 0) {
			i++;
			arg_check(argc, i);
			if (!parse_int_arg(argv[i], &g_Seed))
				exit(-1);
			continue;
		}
		// 下面是各种参数的解析和设置，均为配置CGOptions的静态成员
		// ... existing code ...
		// 省略大量参数解析代码，每个参数都对应CGOptions的一个配置项
		// ... existing code ...
		// 如果遇到未知参数，报错并退出
		cout << "invalid option " << argv[i] << " at: "
			 << i
			 << endl;
		exit(-1);
	}

	// 如果选择C++模式，修正相关选项
	if (CGOptions::lang_cpp()) {
		CGOptions::fix_options_for_cpp();
	}

	// 检查选项冲突
	if (CGOptions::has_conflict()) {
		cout << "error: options conflict - " << CGOptions::conflict_msg() << std::endl;
		exit(-1);
	}

	// 创建程序生成器实例（根据选项选择不同的生成器实现）
	AbsProgramGenerator *generator = AbsProgramGenerator::CreateInstance(argc, argv, g_Seed);
	if (!generator) {
		cout << "error: can't create generator!" << std::endl;
		exit(-1);
	}
	// 启动主生成流程，生成随机C程序
	generator->goGenerator();
	delete generator;

	// 程序正常结束
	return 0;
}

///////////////////////////////////////////////////////////////////////////////

// Local Variables:
// c-basic-offset: 4
// tab-width: 4
// End:

// End of file.
